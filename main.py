import os
import hmac
import hashlib
from fastapi import FastAPI, Request, Header, HTTPException
import httpx
import openai
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file

app = FastAPI()

# Load secrets and tokens from env
GITHUB_SECRET = os.getenv("GITHUB_SECRET", "")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "")
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN", "")
GITLAB_PROJECT_ID = int(os.getenv("GITLAB_PROJECT_ID", "0"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

openai.api_key = OPENAI_API_KEY

GITLAB_API_URL = "https://gitlab.com/api/v4"

def verify_github_signature(payload_body: bytes, signature_header: str):
    expected_signature = "sha256=" + hmac.new(GITHUB_SECRET.encode(), payload_body, hashlib.sha256).hexdigest()
    if not hmac.compare_digest(expected_signature, signature_header):
        raise HTTPException(status_code=403, detail="Invalid GitHub signature")

@app.post("/github-webhook")
async def github_webhook(request: Request, x_hub_signature_256: str = Header(None)):
    payload_body = await request.body()
    verify_github_signature(payload_body, x_hub_signature_256)

    event = await request.json()
    if event.get("action") in ("opened", "synchronize", "reopened"):
        pr = event.get("pull_request")
        branch_name = pr["head"]["ref"]
        title = pr["title"]
        description = pr.get("body") or ""
        pr_diff_url = pr["diff_url"]

        # Create GitLab MR
        mr = await create_gitlab_mr(branch_name, title, description)
        mr_iid = mr["iid"]

        # Fetch PR diff from GitHub
        pr_diff = await get_github_pr_diff(pr_diff_url)

        # Run AI code review on diff
        ai_review = await ai_code_review(pr_diff)

        # Post AI review comment on GitLab MR
        comment = f"ðŸ¤– **AI Code Review:**\n\n{ai_review}\n\n---\n*Generated by AI-powered code review bot.*"
        await post_gitlab_mr_comment(mr_iid, comment)

        return {"status": "MR created and AI review posted"}

    return {"status": "Event ignored"}

async def create_gitlab_mr(branch_name: str, title: str, description: str):
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{GITLAB_API_URL}/projects/{GITLAB_PROJECT_ID}/merge_requests",
            headers={"PRIVATE-TOKEN": GITLAB_TOKEN},
            json={
                "source_branch": branch_name,
                "target_branch": "main",
                "title": title,
                "description": description,
            },
        )
        resp.raise_for_status()
        return resp.json()

async def get_github_pr_diff(pr_diff_url: str) -> str:
    headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3.diff"}
    async with httpx.AsyncClient() as client:
        resp = await client.get(pr_diff_url, headers=headers)
        resp.raise_for_status()
        return resp.text

async def ai_code_review(pr_diff: str) -> str:
    prompt = (
        "You are an expert code reviewer. Analyze the following git diff and provide a concise review, "
        "pointing out any potential issues, suggestions, or improvements:\n\n"
        + pr_diff
    )
    response = await openai.ChatCompletion.acreate(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a helpful code reviewer."},
            {"role": "user", "content": prompt},
        ],
        max_tokens=300,
        temperature=0.3,
    )
    return response.choices[0].message.content.strip()

async def post_gitlab_mr_comment(mr_iid: int, comment: str):
    async with httpx.AsyncClient() as client:
        resp = await client.post(
            f"{GITLAB_API_URL}/projects/{GITLAB_PROJECT_ID}/merge_requests/{mr_iid}/notes",
            headers={"PRIVATE-TOKEN": GITLAB_TOKEN},
            json={"body": comment},
        )
        resp.raise_for_status()
@app.get("/dummy")
async def dummy():
    return {"message": "Dummy endpoint is working"}
